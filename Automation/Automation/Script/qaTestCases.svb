Function GetArrTestCase(ByRef arrSheet,ByVal strFile)
' Local variable declarations
	Dim objExcel, objSheet, objCells
	Dim nUsedRows, nUsedCols, nTop, nLeft, nRow, nCol
	'Dim arrSheet()
	
' Default return value
	GetArrTestCase = False
	
' Create the Excel object
'	On Error Resume Next
	Set objExcel = CreateObject("Excel.Application")
'	If (Err.Number <> 0) Then
'		Exit Function
'	End If
	
' Don't display any alert messages
	objExcel.DisplayAlerts = 0  
	
' Open the document as read-only
'	On Error Resume Next
	Call objExcel.Workbooks.Open(strFile, False, True)
'	If (Err.Number <> 0) Then
'		Exit Function
'	End If
	
' If you wanted to read all sheets, you could call
' objExcel.Worksheets.Count to get the number of sheets
' and the loop through each one. But in this example, we
' will just read the first sheet.
	Set objSheet = objExcel.ActiveWorkbook.Worksheets(2)
	
' Get the number of used rows
	nUsedRows = objSheet.UsedRange.Rows.Count
	
' Get the number of used columns
	nUsedCols = objSheet.UsedRange.Columns.Count
	
' Get the topmost row that has data
	nTop = objSheet.UsedRange.Row
	
' Get leftmost column that has data
	nLeft = objSheet.UsedRange.Column
	
' Get the used cells
	Set objCells = objSheet.Cells
	
' Dimension the sheet array
	ReDim arrSheet(nUsedRows - 1, nUsedCols - 1)
	
' Loop through each row
	For nRow = 0 To (nUsedRows - 1)
' Loop through each column
		For nCol = 0 To (nUsedCols - 1)
' Add the cell value to the sheet array
			arrSheet(nRow, nCol) = objCells(nRow + nTop, nCol + nLeft).Value
		Next
	Next
	
' Close the workbook without saving
	Call objExcel.ActiveWorkbook.Close(False)
	
' Quit Excel
	objExcel.Application.Quit
	
' Return the sheet data to the caller
  If(UBound(arrSheet) > 0)Then
	  GetArrTestCase= True
  Else
		GetArrTestCase= False
  End If
End Function